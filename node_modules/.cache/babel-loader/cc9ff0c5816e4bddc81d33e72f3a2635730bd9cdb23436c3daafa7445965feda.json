{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\",\n  class: \"container\"\n};\nconst _hoisted_2 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.showJoke && $options.showJoke(...args))\n  }, \"Joke\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.showLuck && $options.showLuck(...args))\n  }, \"Luck\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.showMeme && $options.showMeme(...args))\n  }, \"Meme\"), _createElementVNode(\"div\", {\n    id: \"output\",\n    innerHTML: $data.output\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","showJoke","showLuck","showMeme","innerHTML","$data","output","_hoisted_2"],"sources":["/Users/georgi.stoev/qrbf/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" class=\"container\">\n    <button @click=\"showJoke\">Joke</button>\n    <button @click=\"showLuck\">Luck</button>\n    <button @click=\"showMeme\">Meme</button>\n    <div id=\"output\" v-html=\"output\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      lucks: [\n        \"Today is your lucky day!\",\n        \"Good fortune is coming your way.\",\n        \"You will achieve your goals soon.\"\n      ],\n      output: ''\n    };\n  },\n  methods: {\n    async showJoke() {\n      try {\n        const response = await fetch('https://official-joke-api.appspot.com/random_joke');\n        const joke = await response.json();\n        this.output = `${joke.setup} - ${joke.punchline}`;\n      } catch (error) {\n        this.output = 'Failed to fetch a joke.';\n      }\n    },\n    showLuck() {\n      const randomLuck = this.lucks[Math.floor(Math.random() * this.lucks.length)];\n      this.output = randomLuck;\n    },\n    async showMeme() {\n      try {\n        const response = await fetch('https://api.apileague.com/retrieve-random-meme');\n        const data = await response.json();\n        if (data && data.url) {\n          this.output = `<img src=\"${data.url}\" alt=\"Random Meme\" style=\"max-width: 100%;\">`;\n        } else {\n          this.output = 'Failed to fetch a meme.';\n        }\n      } catch (error) {\n        this.output = 'Failed to fetch a meme.';\n      }\n    }\n  }\n};\n</script>\n\n<style>\nbody {\n  font-family: Arial, sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n  background-color: #f0f0f0;\n}\n\n.container {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n#output {\n  margin-top: 20px;\n  font-size: 18px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;mBADtB;;uBACEC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAAuC;IAA9BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;KAAE,MAAI,GAC9BH,mBAAA,CAAuC;IAA9BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,QAAA,IAAAF,QAAA,CAAAE,QAAA,IAAAH,IAAA,CAAQ;KAAE,MAAI,GAC9BH,mBAAA,CAAuC;IAA9BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,QAAA,IAAAH,QAAA,CAAAG,QAAA,IAAAJ,IAAA,CAAQ;KAAE,MAAI,GAC9BH,mBAAA,CAAuC;IAAlCJ,EAAE,EAAC,QAAQ;IAACY,SAAe,EAAPC,KAAA,CAAAC;0BAL7BC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}